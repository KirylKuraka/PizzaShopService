// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ProductAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<Guid>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Cost")
                        .HasColumnType("real");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<Guid>("ProductTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("PromotionalPointsCost")
                        .HasColumnType("real");

                    b.HasKey("ProductID");

                    b.HasIndex("ProductTypeID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductID = new Guid("b7dccbda-1963-4b4f-b083-5a17c5e3e6bd"),
                            Cost = 19.4f,
                            Description = "Бекон, цыпленок, ветчина, сыр блю чиз, сыры чеддер и пармезан, соус песто, кубики брынзы, томаты черри, красный лук, моцарелла, соус альфредо, чеснок, итальянские травы",
                            ProductName = "Додо Микс",
                            ProductTypeID = new Guid("05e1586f-f9a2-4aa3-8d90-513655bf4a53"),
                            PromotionalPointsCost = 10f
                        },
                        new
                        {
                            ProductID = new Guid("a76313d7-f8ec-40b9-b1f7-d88cb028caed"),
                            Cost = 14.4f,
                            Description = "Ветчина, сыр чеддер, сладкий перец, моцарелла, томатный соус, чеснок, итальянские травы",
                            ProductName = "Чиззи чеддер",
                            ProductTypeID = new Guid("05e1586f-f9a2-4aa3-8d90-513655bf4a53"),
                            PromotionalPointsCost = 7f
                        },
                        new
                        {
                            ProductID = new Guid("d4d7e487-9d42-4653-bbe5-a419e9890639"),
                            Cost = 5.4f,
                            Description = "Напиток из молока и мороженого с шоколадным сиропом",
                            ProductName = "Шоколадный молочный коктейль",
                            ProductTypeID = new Guid("304d8855-f87e-4b2b-a4ad-c35e23d2b4ca"),
                            PromotionalPointsCost = 2.5f
                        },
                        new
                        {
                            ProductID = new Guid("8c72c183-ecee-4d21-a90c-618185e957e8"),
                            Cost = 5.8f,
                            Description = "Напиток из молока и мороженого с добавлением дробленого печенья «Орео»",
                            ProductName = "Молочный коктейль с печеньем Орео",
                            ProductTypeID = new Guid("304d8855-f87e-4b2b-a4ad-c35e23d2b4ca"),
                            PromotionalPointsCost = 2.8f
                        },
                        new
                        {
                            ProductID = new Guid("4400c4c1-ac58-438a-9b23-5209c7621e4b"),
                            Cost = 0.6f,
                            Description = "Барбекю соус",
                            ProductName = "Барбекю соус",
                            ProductTypeID = new Guid("cdc542f4-78c0-45fd-8b4f-cc6b97404555"),
                            PromotionalPointsCost = 0.6f
                        },
                        new
                        {
                            ProductID = new Guid("52de27a6-5519-4387-b7cf-887365dd0345"),
                            Cost = 0.6f,
                            Description = "Сырный соус",
                            ProductName = "Сырный соус",
                            ProductTypeID = new Guid("cdc542f4-78c0-45fd-8b4f-cc6b97404555"),
                            PromotionalPointsCost = 0.6f
                        },
                        new
                        {
                            ProductID = new Guid("3b710690-d1f7-459b-b854-8e85ca14750d"),
                            Cost = 0.6f,
                            Description = "Горчичный  соус",
                            ProductName = "Горчичный  соус",
                            ProductTypeID = new Guid("cdc542f4-78c0-45fd-8b4f-cc6b97404555"),
                            PromotionalPointsCost = 0.6f
                        },
                        new
                        {
                            ProductID = new Guid("f1739067-0e46-4fb7-939d-b4caf93aea80"),
                            Cost = 0.6f,
                            Description = "Кисло-сладкий соус",
                            ProductName = "Кисло-сладкий соус",
                            ProductTypeID = new Guid("cdc542f4-78c0-45fd-8b4f-cc6b97404555"),
                            PromotionalPointsCost = 0.6f
                        },
                        new
                        {
                            ProductID = new Guid("91128504-95af-45c0-b778-5652f360f7a2"),
                            Cost = 0.6f,
                            Description = "Терияки соус",
                            ProductName = "Терияки соус",
                            ProductTypeID = new Guid("cdc542f4-78c0-45fd-8b4f-cc6b97404555"),
                            PromotionalPointsCost = 0.6f
                        },
                        new
                        {
                            ProductID = new Guid("26c364cc-83ff-4cf1-8c8d-269f26f9318b"),
                            Cost = 0.6f,
                            Description = "Чесночный  соус",
                            ProductName = "Чесночный  соус",
                            ProductTypeID = new Guid("cdc542f4-78c0-45fd-8b4f-cc6b97404555"),
                            PromotionalPointsCost = 0.6f
                        });
                });

            modelBuilder.Entity("Entities.Models.ProductType", b =>
                {
                    b.Property<Guid>("ProductTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("ProductTypeID");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            ProductTypeID = new Guid("05e1586f-f9a2-4aa3-8d90-513655bf4a53"),
                            ProductTypeName = "Пицца"
                        },
                        new
                        {
                            ProductTypeID = new Guid("304d8855-f87e-4b2b-a4ad-c35e23d2b4ca"),
                            ProductTypeName = "Напиток"
                        },
                        new
                        {
                            ProductTypeID = new Guid("cdc542f4-78c0-45fd-8b4f-cc6b97404555"),
                            ProductTypeName = "Соус"
                        });
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
