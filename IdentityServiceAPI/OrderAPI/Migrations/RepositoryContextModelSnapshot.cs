// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace OrderAPI.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Entities.Models.Customer", b =>
                {
                    b.Property<Guid>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CustomerID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entities.Models.DeliveryMethod", b =>
                {
                    b.Property<Guid>("DeliveryMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DeliveryMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeliveryMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("DeliveryMethodID");

                    b.ToTable("DeliveryMethods");

                    b.HasData(
                        new
                        {
                            DeliveryMethodID = new Guid("f5ec8ff6-1e86-4a95-b40e-25b592743501"),
                            DeliveryMethodName = "Самовывоз"
                        },
                        new
                        {
                            DeliveryMethodID = new Guid("36f18c03-e238-4df0-bbe7-d71ba7daf1e8"),
                            DeliveryMethodName = "Доставка"
                        });
                });

            modelBuilder.Entity("Entities.Models.OrderStatus", b =>
                {
                    b.Property<Guid>("OrderStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderStatusID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderStatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("OrderStatusID");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            OrderStatusID = new Guid("89e487c2-6ec2-4995-8623-c6e8349abe86"),
                            OrderStatusName = "Обрабатывается"
                        },
                        new
                        {
                            OrderStatusID = new Guid("44a36979-c0c7-4c54-a8c4-76c69ea816a0"),
                            OrderStatusName = "Подтвержден"
                        },
                        new
                        {
                            OrderStatusID = new Guid("cba8e6c5-6bc4-4d0e-ab21-56ad99b2eae7"),
                            OrderStatusName = "Отменен"
                        },
                        new
                        {
                            OrderStatusID = new Guid("c14bd298-d7e3-4876-9666-81b8de932f7c"),
                            OrderStatusName = "Отправлен"
                        },
                        new
                        {
                            OrderStatusID = new Guid("d1717863-4dce-4fc2-9524-648f8e7c4c3f"),
                            OrderStatusName = "Доставлен"
                        });
                });

            modelBuilder.Entity("Entities.Models.PaymentMethod", b =>
                {
                    b.Property<Guid>("PaymentMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PaymentMethodID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("PaymentMethodID");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            PaymentMethodID = new Guid("3a45abc3-0a27-4d40-b618-43b800a6d8aa"),
                            PaymentMethodName = "Наличные"
                        },
                        new
                        {
                            PaymentMethodID = new Guid("d1f0556e-0691-43fa-a7ff-f2e3bd2fee17"),
                            PaymentMethodName = "Карта"
                        });
                });

            modelBuilder.Entity("Entities.Models.OrderedProduct", b =>
                {
                    b.Property<Guid>("OrderedProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderedProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<int>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid>("OrderID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("TotalCost")
                        .IsRequired()
                        .HasColumnType("real");

                    b.HasKey("OrderedProductID");

                    b.HasIndex("ProductTypeID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderedProducts");
                });

            modelBuilder.Entity("Entities.Models.ProductType", b =>
                {
                    b.Property<Guid>("ProductTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductTypeID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProductTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("ProductTypeID");

                    b.ToTable("ProductTypes");

                    b.HasData(
                        new
                        {
                            ProductTypeID = new Guid("05e1586f-f9a2-4aa3-8d90-513655bf4a53"),
                            ProductTypeName = "Пицца"
                        },
                        new
                        {
                            ProductTypeID = new Guid("304d8855-f87e-4b2b-a4ad-c35e23d2b4ca"),
                            ProductTypeName = "Напиток"
                        },
                        new
                        {
                            ProductTypeID = new Guid("cdc542f4-78c0-45fd-8b4f-cc6b97404555"),
                            ProductTypeName = "Соус"
                        });
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
            {
                b.Property<Guid>("OrderID")
                    .ValueGeneratedOnAdd()
                    .HasColumnName("OrderID")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("CustomerID")
                    .HasColumnType("uniqueidentifier");

                b.Property<DateTime>("OrderDate")
                    .IsRequired()
                    .HasColumnType("date");

                b.Property<Guid>("DeliveryMethodID")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("PaymentMethodID")
                    .HasColumnType("uniqueidentifier");

                b.Property<Guid>("OrderStatusID")
                    .HasColumnType("uniqueidentifier");

                b.Property<string>("TotalCost")
                    .IsRequired()
                    .HasColumnType("nvarchar(250)")
                    .HasMaxLength(250);

                b.HasKey("OrderID");

                b.HasIndex("CustomerID");

                b.HasIndex("DeliveryMethodID");

                b.HasIndex("OrderStatusID");

                b.ToTable("Orders");
            });

            modelBuilder.Entity("Entities.Models.OrderedProduct", b =>
                {
                    b.HasOne("Entities.Models.ProductType", "ProductTypes")
                        .WithMany()
                        .HasForeignKey("ProductTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Order", "Orders")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
            {
                b.HasOne("Entities.Models.Customer", "Customers")
                    .WithMany()
                    .HasForeignKey("CustomerID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Entities.Models.DeliveryMethod", "DeliveryMethods")
                    .WithMany()
                    .HasForeignKey("DeliveryMethodID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Entities.Models.PaymentMethod", "PaymentMethods")
                    .WithMany()
                    .HasForeignKey("PaymentMethodID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Entities.Models.OrderStatus", "OrderStatuses")
                    .WithMany()
                    .HasForeignKey("OrderStatusID")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}
